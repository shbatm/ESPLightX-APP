{"version":3,"sources":["dist/js/color-picker.js"],"names":["root","factory","module","exports","angular","require","define","amd","this","ColorPickerController","$element","ColorPickerService","onColorSelClick","colorSel","classList","add","_isPaletteVisible","vm","onSelect","color","selectedColor","publish","ripple","palette","remove","onRotatorDrag","angle","saturation","luminosity","alpha","rgbModel","hslToRgb","hexModel","hslToHex","style","backgroundColor","borderColor","hex","hsla","hue","rgba","red","green","blue","$onInit","rotator","querySelector","knob","addEventListener","_onColorSelAnimationEnd","_onKnobTransitionEnd","_onRippleAnimationEnd","_onPaletteTransitionEnd","$onChanges","call","rgbToHsl","$onDestroy","removeEventListener","unsubscribe","_isKnobVisible","ev","propertyName","isIn","contains","isOut","subscribe","colorPickerRotator","ColorPickerRotatorLink","$scope","propelInstance","Propeller","inertia","speed","onRotate","onDragStart","addClass","onDragStop","removeClass","$watch","newAngle","$on","stop","unbind","directive","link","restrict","scope","$rootScope","eventName","data","$applyAsync","$broadcast","eventPrefix","callback","unsubToken","subscribers","push","forEach","rgbToHex","r","g","b","toString","slice","h","s","max","Math","min","l","d","colorModel","q","p","_hue2rgb","round","t","$inject","component","bindings","controller","template","service"],"mappings":"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","file":"dist/js/color-picker.min.js","sourceRoot":"/","sourcesContent":["(function (root, factory) {\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n        // CommonJS\r\n        if (typeof angular === 'undefined') {\r\n            factory(require('angular'));\r\n        } else {\r\n            factory(angular);\r\n        }\r\n        module.exports = 'color.picker.core';\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        // AMD\r\n        define(['angular'], factory);\r\n    } else {\r\n        // Global Variables\r\n        factory(root.angular);\r\n    }\r\n}(this, function (angular) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc component\r\n     * @name colorPicker\r\n     * @module color.picker.core\r\n     * @restrict E\r\n     *\r\n     * @param {expression} [onSelect]      A function to invoke when user selects a color\r\n     * @param {Object}     [ngModel]       RGBA color model. If provided will set the picker to the provided color\r\n     *                                     Defaults to { red: 255, green: 0, blue: 0 }\r\n     * @param {number}     [ngModel.red]   Value between 0 and 255\r\n     * @param {number}     [ngModel.green] Value between 0 and 255\r\n     * @param {number}     [ngModel.blue]  Value between 0 and 255\r\n     * @param {number}     [ngModel.alpha] Value between 0 and 1\r\n     *\r\n     * @description\r\n     * Material design radial color picker. Provides selecting a pure color via dragging the whole color wheel.\r\n     * `ng-model` is used to change programatically the active color in the picker. If it's not provided\r\n     * the initial color defaults to red (255, 0, 0).\r\n     *\r\n     * The `on-select` attribute is a function which is called when a user a user selects a color with the color\r\n     * selector in the middle. The function is invoked only if the color picker is opened.\r\n     *\r\n     * For easier communication a set of events are provided that can even programatically open or close the picker\r\n     * without interacting with the UI. All events are published/subscribed at the $rootScope so that sibling components\r\n     * can subscribe to them too. All events carry the current color in the event data payload.\r\n     *\r\n     * `color-picker.show` - Fires when the color picker is about to show and *before* any animation is started.\r\n     * `color-picker.shown` - Fires when the color picker is shown and has finished animating.\r\n     *\r\n     * `color-picker.selected` - Fires when a color is selected via the middle selector. Event is fired right before `hide`.\r\n     *\r\n     * `color-picker.hide` - Fires when the color picker is about to hide and *before* any animation is started.\r\n     * `color-picker.hidden` - Fires when the color picker is hidden and has finished animating.\r\n     *\r\n     * @example <color-picker on-select=\"$ctrl.onSelect(color)\" ng-model=\"$ctrl.initialColor\"></color-picker>\r\n     */\r\n    ColorPickerController.$inject = [\"$element\", \"ColorPickerService\"];\r\n    ColorPickerService.$inject = [\"$rootScope\"];\r\n    angular\r\n        .module('color.picker.core', [])\r\n        .component('colorPicker', {\r\n            bindings: {\r\n                onSelect: '&',\r\n                color: '<?ngModel' // initial color to load\r\n            },\r\n            controller: ColorPickerController,\r\n            template:   '<div class=\"rotator\" color-picker-rotator on-rotate=\"$ctrl.onRotatorDrag(angle)\" angle=\"$ctrl.angle\">' +\r\n                            '<div class=\"knob\"></div>' +\r\n                        '</div>' +\r\n                        '<button type=\"button\" class=\"color\" ng-click=\"$ctrl.onColorSelClick()\"></button>' +\r\n                        '<div class=\"color-shadow\"></div>' +\r\n                        '<div class=\"color-palette\"></div>'\r\n        });\r\n\r\n    /* @ngInject */\r\n    function ColorPickerController($element, ColorPickerService) {\r\n        var vm = this;\r\n\r\n        this.$onInit = $onInit;\r\n        this.$onDestroy = $onDestroy;\r\n        this.$onChanges = $onChanges;\r\n        this.onColorSelClick = onColorSelClick;\r\n        this.onRotatorDrag = onRotatorDrag;\r\n\r\n        var knob, rotator, colorSel, ripple, palette;\r\n\r\n        ColorPickerService.subscribe('open', function() {\r\n            if (!_isPaletteVisible()) {\r\n                ColorPickerService.publish('show', vm.selectedColor);\r\n\r\n                // showing palette will also show the knob\r\n                palette.classList.add('blur-palette-in');\r\n                palette.classList.remove('blur-palette-out');\r\n            }\r\n        });\r\n\r\n        ColorPickerService.subscribe('close', function() {\r\n            if (_isPaletteVisible()) {\r\n                ColorPickerService.publish('hide', vm.selectedColor);\r\n\r\n                // hiding knob will also hide the palette\r\n                knob.classList.add('zoom-knob-out');\r\n                knob.classList.remove('zoom-knob-in');\r\n            }\r\n        });\r\n\r\n        function onColorSelClick() {\r\n            colorSel.classList.add('click-color');\r\n\r\n            if (_isPaletteVisible()) {\r\n                vm.onSelect({ color: vm.selectedColor });\r\n                ColorPickerService.publish('selected', vm.selectedColor);\r\n                ColorPickerService.publish('hide', vm.selectedColor);\r\n                ripple.classList.add('color-shadow-animate');\r\n            } else {\r\n                ColorPickerService.publish('show', vm.selectedColor);\r\n                palette.classList.add('blur-palette-in');\r\n                palette.classList.remove('blur-palette-out');\r\n            }\r\n        }\r\n\r\n        function onRotatorDrag(angle) {\r\n            var saturation = 100;\r\n            var luminosity = 50;\r\n            var alpha = 1;\r\n            var color = 'hsla(' + angle + ', ' + saturation + '%, ' + luminosity + '%, ' + alpha + ')';\r\n            var rgbModel = ColorPickerService.hslToRgb(angle, saturation, luminosity);\r\n            var hexModel = ColorPickerService.hslToHex(angle, saturation, luminosity);\r\n\r\n            colorSel.style.backgroundColor = color;\r\n            ripple.style.borderColor = color;\r\n\r\n            vm.angle = angle;\r\n            vm.selectedColor = {\r\n                hex: hexModel,\r\n                hsla: {\r\n                    hue: angle,\r\n                    saturation: saturation,\r\n                    luminosity: luminosity,\r\n                    alpha: alpha\r\n                },\r\n                rgba: {\r\n                    red: rgbModel.red,\r\n                    green: rgbModel.green,\r\n                    blue: rgbModel.blue,\r\n                    alpha: alpha\r\n                }\r\n            };\r\n        }\r\n\r\n        function $onInit() {\r\n            rotator = $element[0].querySelector('.rotator');\r\n            knob = $element[0].querySelector('.knob');\r\n            colorSel = $element[0].querySelector('.color');\r\n            ripple = $element[0].querySelector('.color-shadow');\r\n            palette = $element[0].querySelector('.color-palette');\r\n\r\n            colorSel.addEventListener('animationend', _onColorSelAnimationEnd);\r\n            knob.addEventListener('transitionend', _onKnobTransitionEnd);\r\n            ripple.addEventListener('animationend', _onRippleAnimationEnd);\r\n            palette.addEventListener('transitionend', _onPaletteTransitionEnd);\r\n\r\n            // @fix angular < 1.5.4 doesn't trigger $onChanges properly on init\r\n            $onChanges.call(this);\r\n        }\r\n\r\n        function $onChanges() {\r\n            if (this.color && 'red' in this.color && 'green' in this.color && 'blue' in this.color) {\r\n                this.angle = ColorPickerService.rgbToHsl(this.color.red, this.color.green, this.color.blue).hue;\r\n            } else {\r\n                this.angle = 0;\r\n            }\r\n        }\r\n\r\n        function $onDestroy() {\r\n            colorSel.removeEventListener('animationend', _onColorSelAnimationEnd);\r\n            knob.removeEventListener('transitionend', _onKnobTransitionEnd);\r\n            ripple.removeEventListener('animationend', _onRippleAnimationEnd);\r\n            palette.removeEventListener('transitionend', _onPaletteTransitionEnd);\r\n\r\n            // clear circular child DOM node references to allow GC to collect them\r\n            knob     = null; rotator = null;\r\n            colorSel = null; ripple = null;\r\n            palette  = null;\r\n\r\n            ColorPickerService.unsubscribe();\r\n        }\r\n\r\n        function _onColorSelAnimationEnd() {\r\n            if (!_isKnobVisible()) {\r\n                knob.classList.add('zoom-knob-in');\r\n                knob.classList.remove('zoom-knob-out');\r\n            } else {\r\n                knob.classList.add('zoom-knob-out');\r\n                knob.classList.remove('zoom-knob-in');\r\n            }\r\n\r\n            colorSel.classList.remove('click-color');\r\n        }\r\n\r\n        function _onKnobTransitionEnd(ev) {\r\n            // 'transitionend' fires for every transitioned property\r\n            if (ev.propertyName === 'transform') {\r\n                if (!_isKnobVisible()) {\r\n                    palette.classList.add('blur-palette-out');\r\n                    palette.classList.remove('blur-palette-in');\r\n                } else {\r\n                    ColorPickerService.publish('shown', vm.selectedColor);\r\n                }\r\n            }\r\n        }\r\n\r\n        function _onRippleAnimationEnd() {\r\n            ripple.classList.remove('color-shadow-animate');\r\n        }\r\n\r\n        function _onPaletteTransitionEnd(ev) {\r\n            // 'transitionend' fires for every transitioned property\r\n            if (ev.propertyName === 'transform') {\r\n                if (_isPaletteVisible()) {\r\n                    knob.classList.add('zoom-knob-in');\r\n                    knob.classList.remove('zoom-knob-out');\r\n                } else {\r\n                    ColorPickerService.publish('hidden', vm.selectedColor);\r\n                }\r\n            }\r\n        }\r\n\r\n        function _isPaletteVisible() {\r\n            var isIn = palette.classList.contains('blur-palette-in');\r\n            var isOut = palette.classList.contains('blur-palette-out');\r\n\r\n            return isIn || (!isIn && !isOut);\r\n        }\r\n\r\n        function _isKnobVisible() {\r\n            return !knob.classList.contains('zoom-knob-out');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name colorPickerRotator\r\n     * @module color.picker.core\r\n     * @restrict A\r\n     *\r\n     * @param {expression} [onRotate] Usually a function to invoke when angle changes\r\n     * @param {number}     [angle]    Angle to change the rotator at. A number between 0 and 360\r\n     *\r\n     * @description\r\n     * Provides rotation capabilities to any element. Also supports touch devices.\r\n     *\r\n     * @example <div color-picker-rotator on-rotate=\"$ctrl.onRotate(angle)\" angle=\"$ctrl.angle\"></div>\r\n     */\r\n    angular\r\n        .module('color.picker.core')\r\n        .directive('colorPickerRotator', colorPickerRotator);\r\n\r\n    /* @ngInject */\r\n    function colorPickerRotator() {\r\n        var directive = {\r\n            link: ColorPickerRotatorLink,\r\n            restrict: 'A',\r\n            scope: {\r\n                onRotate: '&',\r\n                angle: '<'\r\n            }\r\n        };\r\n\r\n        return directive;\r\n\r\n        function ColorPickerRotatorLink($scope, $element) {\r\n            $scope.angle = $scope.angle || 0;\r\n\r\n            var propelInstance = new Propeller($element[0], {\r\n                angle: $scope.angle,\r\n                inertia: .7,\r\n                speed: 0,\r\n                onRotate: function(ev) {\r\n                    $scope.onRotate({ angle: this.angle });\r\n                },\r\n                onDragStart: function() {\r\n                    $element.addClass('dragging');\r\n                },\r\n                onDragStop: function() {\r\n                    $element.removeClass('dragging');\r\n                }\r\n            });\r\n\r\n            $scope.$watch('angle', function(newAngle) {\r\n                propelInstance.angle = newAngle;\r\n                $scope.onRotate({ angle: newAngle });\r\n            });\r\n\r\n            $scope.$on('$destroy', function() {\r\n                propelInstance.stop();\r\n                propelInstance.unbind();\r\n                propelInstance = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @namespace Utilities\r\n     * @name ColorPickerService\r\n     * @module color.picker.core\r\n     * @requires $rootScope\r\n     *\r\n     * @description\r\n     * API for intercomponent comunication and color model conversions.\r\n     *\r\n     * @example\r\n     * // Convert RGB color model to hexadecimal string\r\n     * ColorPickerService.rgbToHex(255, 0, 0); // returns 'FF0000'\r\n     */\r\n    angular\r\n        .module('color.picker.core')\r\n        .service('ColorPickerService', ColorPickerService);\r\n\r\n    /* @ngInject */\r\n    function ColorPickerService($rootScope) {\r\n        this.publish = publish;\r\n        this.subscribe = subscribe;\r\n        this.unsubscribe = unsubscribe;\r\n\r\n        this.rgbToHex = rgbToHex;\r\n        this.rgbToHsl = rgbToHsl;\r\n        this.hslToRgb = hslToRgb;\r\n        this.hslToHex = hslToHex;\r\n\r\n        var subscribers = [];\r\n        var eventPrefix = 'color-picker.'\r\n\r\n        /**\r\n         * Broadcasts an event on the whole app. Uses $rootScope as an event bus\r\n         * so that sibling components can catch the event also. $applyAsync is used\r\n         * to make sure that the broadcast happens on the earliest next digest cycle.\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param  {string} eventName Sub-topic to broadcast\r\n         * @param  {*}      [data]    Any type of payload to broadcast\r\n         *\r\n         * @return {void}\r\n         */\r\n        function publish(eventName, data) {\r\n            $rootScope.$applyAsync(function() {\r\n                // queue up the broadcast in the next digest\r\n                $rootScope.$broadcast(eventPrefix + eventName, data);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Facade wrapper for outside world interaction via $rootScope events.\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param  {string}   eventName Sub-topic to listen for. Can be 'open' or 'close'\r\n         * @param  {Function} callback  Function to invoke when event gets fired\r\n         *\r\n         * @return {Function}           Unsubscribe function for manual unsubscribtion.\r\n         */\r\n        function subscribe(eventName, callback) {\r\n            var unsubToken = $rootScope.$on(eventPrefix + eventName, callback);\r\n\r\n            subscribers.push(unsubToken);\r\n\r\n            return unsubToken;\r\n        }\r\n\r\n        /**\r\n         * Removes all event listeners setup with the `.subscribe()` method\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param  {string}   eventName Sub-topic to listen for. Can be 'open' or 'close'\r\n         * @param  {Function} callback  Function to invoke when event gets fired\r\n         *\r\n         * @return {void}\r\n         */\r\n        function unsubscribe() {\r\n            subscribers.forEach(function(unsubscribe) {\r\n                unsubscribe();\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Converts RGB color model to hexadecimal string.\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param  {number} r Integer between 0 and 255\r\n         * @param  {number} g Integer between 0 and 255\r\n         * @param  {number} b Integer between 0 and 255\r\n         *\r\n         * @return {string}   6 char long hex string\r\n         */\r\n        function rgbToHex(r, g, b) {\r\n            return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n        }\r\n\r\n        /**\r\n         * Converts RGB color model to HSL model.\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param   {number} r Integer between 0 and 255\r\n         * @param   {number} g Integer between 0 and 255\r\n         * @param   {number} b Integer between 0 and 255\r\n         *\r\n         * @return  {Object}   The HSL representation containing the hue (in degrees),\r\n         *                     saturation (in percentage) and luminosity (in percentage) fields.\r\n         */\r\n        function rgbToHsl(r, g, b) {\r\n            r = r / 255;\r\n            g = g / 255;\r\n            b = b / 255;\r\n\r\n            var h, s;\r\n            var max = Math.max(r, g, b);\r\n            var min = Math.min(r, g, b);\r\n            var l = (max + min) / 2;\r\n\r\n            if (max === min) {\r\n                h = s = 0; // achromatic\r\n            } else {\r\n                var d = max - min;\r\n\r\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n\r\n                if (max === r) h = (g - b) / d + (g < b ? 6 : 0);\r\n                if (max === g) h = (b - r) / d + 2;\r\n                if (max === b) h = (r - g) / d + 4;\r\n            }\r\n\r\n            return {\r\n                hue: h * 60,\r\n                saturation: s * 100,\r\n                luminosity: l * 100\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Converts HSL color model to hexademical string.\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param  {number} r Integer between 0 and 255\r\n         * @param  {number} g Integer between 0 and 255\r\n         * @param  {number} b Integer between 0 and 255\r\n         *\r\n         * @return {string}   6 char long hex string\r\n         */\r\n        function hslToHex(h, s, l) {\r\n            var colorModel = hslToRgb(h, s, l);\r\n\r\n            return rgbToHex(colorModel.red, colorModel.green, colorModel.blue);\r\n        }\r\n\r\n        /**\r\n         * Converts HSL color model to RGB model.\r\n         * Shamelessly taken from http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n         *\r\n         * @memberOf Utilities\r\n         *\r\n         * @param   {number} h The hue. Number in the 0-360 range\r\n         * @param   {number} s The saturation. Number in the 0-100 range\r\n         * @param   {number} l The luminosity. Number in the 0-100 range\r\n         *\r\n         * @return  {Object}   The RGB representation containing the red, green and blue fields\r\n         */\r\n        function hslToRgb(h, s, l) {\r\n            var r, g, b;\r\n\r\n            h = h / 360;\r\n            s = s / 100;\r\n            l = l / 100;\r\n\r\n            if (s === 0) {\r\n                r = g = b = l; // achromatic\r\n            } else {\r\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n                var p = 2 * l - q;\r\n\r\n                r = _hue2rgb(p, q, h + 1/3);\r\n                g = _hue2rgb(p, q, h);\r\n                b = _hue2rgb(p, q, h - 1/3);\r\n            }\r\n\r\n            return {\r\n                red: Math.round(r * 255),\r\n                green: Math.round(g * 255),\r\n                blue: Math.round(b * 255)\r\n            };\r\n        }\r\n\r\n        function _hue2rgb(p, q, t) {\r\n            if (t < 0) t += 1;\r\n            if (t > 1) t -= 1;\r\n            if (t < 1/6) return p + (q - p) * 6 * t;\r\n            if (t < 1/2) return q;\r\n            if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n\r\n            return p;\r\n        }\r\n    }\r\n}));\r\n"]}